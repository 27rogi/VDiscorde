// Discord.js Initialization
const Discord = require('discord.js');
const bot = new Discord.Client();

const fs = require("fs");

// Config
const config = require("./config.json");

let defaultPrefix = config.prefix;

bot.login(config.token);

// Account data HashMap initialization
var HashMap = require('hashmap');
var map = new HashMap();

// VK API Initialization
const VK = require('vk-io');
const vk = new VK({
    token: config.vk_token
});

const { ApiError } = require('vk-io/errors');

// Moment.js Initialization
var moment = require('moment');

bot.on('ready', () => {
    bot.user.setGame("vk!help");
});

function getPrefix() {
    return "vk!";
}

// function checkLanguage(id) {
//     let lang = JSON.parse(fs.readFileSync("./lang.json", "utf8"));

//     let ServerID = bot.guilds.get(id).id;
//     if (lang[ServerID] !== undefined) {
//         if (lang[ServerID].lang === "ru") {
//             return "russian";
//         } else {
//             return "english";
//         }
//     } else {
//         return "english";
//     }
// }

// function getMessage(lang, messageID) {
//     return JSON.parse(fs.readFileSync("./messages.json", "utf8"))
// }

// function saveLang() {
//     fs.writeFile("./lang.json", JSON.stringify(points), (err) => {
//         if (err) console.error(err)
//     });
// }

// Thanks to @shomrat for this code.
function timeConverter(UNIX_timestamp) {
    var a = new Date(UNIX_timestamp * 1000);
    var months = ['–Ø–Ω–≤.', '–§–µ–≤.', '–ú–∞—Ä—Ç', '–ê–ø—Ä.', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥.', '–°–µ–Ω.', '–û–∫—Ç.', '–ù–æ—è.', '–î–µ–∫.'];
    var year = a.getFullYear();
    var month = months[a.getMonth()];
    var date = a.getDate();
    var hour = a.getHours();
    var min = a.getMinutes();
    var sec = a.getSeconds();
    var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;
    return time;
}

function generateKey() {
    var text = "";
    var possible = "&*!()@?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (var i = 0; i < 11; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}

function isIdInt(id, ifNot) {
    if (parseInt(id) === ifNot.object_id) {
        return id;
    } else {
        return ifNot.object_id;
    }
}


function getUsercard(userId, message) {
    if (userId != undefined) {
        vk.api.call('users.get', {
                user_ids: userId,
                fields: 'sex, status, about, photo_max, online, followers_count, sex, bdate, last_seen'
            }).then((user) => {
                vk.api.call('utils.resolveScreenName', {
                    screen_name: userId
                }).then((userID) => {
                    let id = isIdInt(userId, userID);
                    vk.api.call('friends.get', {
                        user_id: id,
                        count: 0
                    }).then((friends) => {
                        for (userData in user) {
                            var EmbedMsg = new Discord.RichEmbed()
                                .setTitle(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: **${userId}**`)
                                .setColor("#507299")
                                .setThumbnail(user[userData].photo_max)
                                .setURL("https://vk.com/" + user[userData].id)
                                .addField("üéô –ò–º—è", user[userData].first_name + " " + user[userData].last_name, true);
                            switch (user[userData].sex) {
                                case 2:
                                    EmbedMsg.addField("üë® –ü–æ–ª", "–ú—É–∂—Å–∫–æ–π", true);
                                    break;
                                case 1:
                                    EmbedMsg.addField("üë© –ü–æ–ª", "–ñ–µ–Ω—Å–∫–∏–π", true);
                                    break;
                            }
                            switch (user[userData].online) {
                                case 1:
                                    EmbedMsg.addField("üÜó –û–Ω–ª–∞–π–Ω?", "–î–∞", true);
                                    break;
                                case 0:
                                    if (user[userData].last_seen.time !== undefined) {
                                        EmbedMsg.addField("‚è∞ –ë—ã–ª –≤ —Å–µ—Ç–∏", timeConverter(user[userData].last_seen.time), true);
                                    }
                                    break;
                            }

                            if (user[userData].bdate !== undefined && user[userData].bdate !== "") {
                                EmbedMsg.addField("üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", user[userData].bdate, true);
                            }
                            if (friends.count !== undefined) {
                                EmbedMsg.addField("üë• –î—Ä—É–∑—å—è", friends.count, true);
                            } else {
                                console.log("—Å—Ç—Ä–∞–Ω–Ω–∞");
                            }

                            EmbedMsg.addField("üë§ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", user[userData].followers_count, true);

                            if (user[userData].about !== undefined && user[userData].about !== "") {
                                EmbedMsg.addField("üìã –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", user[userData].about, true);
                            }

                            if (user[userData].status !== undefined && user[userData].status !== "") {
                                EmbedMsg.addField("üñå –°—Ç–∞—Ç—É—Å", user[userData].status, true);
                            }
                            message.channel.send({
                                embed: EmbedMsg
                            });
                        }
                    });
                });
            })
            .catch(ApiError, (error) => {
                if (error.code == "113") {
                    message.reply("–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–≤–µ—Ä–µ–Ω!");
                } else {
                    console.log(error);
                }
            });
    }
}

bot.on('message', (message) => {
    if (message.content.startsWith(getPrefix(message.guild.id) + "user")) {
        if (message.author.bot) return;
        const args = message.content.split(/\s+/g).slice(1);
        let vkID = args[0].replace("https://vk.com/", "").replace("http://vk.com/", "").replace("/", "");
        let member = message.mentions.members.first();
        if (member !== undefined) {
            let users = JSON.parse(fs.readFileSync("./users.json", "utf8"));
            if (users[member.id] === undefined) { message.reply("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç **–í–ö–æ–Ω—Ç–∞–∫—Ç–µ**!"); return; }
            getUsercard(users[member.id].vkLink, message);
        } else if (vkID !== undefined || vkID !== "") {
            getUsercard(vkID, message);
        }
    }

    if (message.content.startsWith(getPrefix(message.guild.id) + "group")) {
        if (message.author.bot) return;
        const args = message.content.split(/\s+/g).slice(1);
        let groupID = args[0];
        if (groupID != undefined) {
            message.reply(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø—ã —Å ID —Ä–∞–≤–Ω—ã–º **${groupID.replace(',', "")}**`).then(message => message.delete(30000));
            vk.api.groups.getById({
                    group_id: groupID.replace(',', ""),
                    fields: 'members_count,description,status,activity,photo_max'
                })
                .then((group) => {
                    for (groupData in group) {
                        var EmbedMsg = new Discord.RichEmbed()
                            .setTitle(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ: **${groupID}**`)
                            .setColor("#507299")
                            .setImage(group[groupData].photo_max)
                            .setThumbnail(group[groupData].photo_max)
                            .setURL("https://vk.com/" + group[groupData].id)
                            .addField("üéô –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", group[groupData].name, true);
                        if (group[groupData].description != undefined && group[groupData].description != "") {
                            EmbedMsg.addField("üñå –û–ø–∏—Å–∞–Ω–∏–µ", group[groupData].description, true);
                        }
                        switch (group[groupData].is_closed) {
                            case 1:
                                EmbedMsg.addField("üîí –ó–∞–∫—Ä—ã—Ç–æ–µ?", "–î–∞", true);
                                break;
                            case 0:
                                EmbedMsg.addField("üîí –ó–∞–∫—Ä—ã—Ç–æ–µ?", "–ù–µ—Ç", true);
                                break;
                        }
                        if (group[groupData].activity != undefined && group[groupData].activity != "") {
                            EmbedMsg.addField("üìù –¢–∏–ø", group[groupData].activity, true);
                        }
                        EmbedMsg.addField("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", group[groupData].members_count, true);
                        message.channel.send({ embed: EmbedMsg });
                    }
                })
                .catch((error) => {
                    console.error(error);
                });
        } else {
            message.reply("**–û–π!** –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
        }
    }

    /*
    / Not working >_>
    */
    // if (message.content.startsWith(getPrefix(message.guild.id) + "document")) {
    //     if (message.author.bot) return;
    //     const args = message.content.split(/\s+/g).slice(1);
    //     let docsID = args[0];
    //     if (docsID != undefined) {
    //         message.reply(`–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å ID —Ä–∞–≤–Ω—ã–º **${docsID.replace(',', "")}**`).then(message => message.delete(30000));
    //         vk.api.docs.getById({
    //                 docs: docsID.replace(',', "")
    //             })
    //             .then((docs) => {
    //                 for (docsData in docs) {
    //                     message.channel.send(docs[docsData].url);
    //                 }
    //             })
    //             .catch((error) => {
    //                 if (error.contains("Invalid user id")) {

    //                 }
    //                 console.error(error);
    //             });
    //     } else {
    //         message.reply("**–û–π!** –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å ID –¥–æ–∫—É–º–µ–Ω—Ç–∞!");
    //     }
    // }

    // if (message.content.startsWith(getPrefix(message.guild.id) + "prefix")) {
    //     if (message.author.bot) return;
    //     let perms = message.member.permissions;
    //     let isAdmin = message.member.hasPermission("ADMINISTRATOR");
    //     if (isAdmin) {

    //         const args = message.content.split(/\s+/g).slice(1);
    //         let prefixName = args[0];
    //         if (prefixName != undefined) {

    //             sql.get(`SELECT * FROM servers WHERE seid = "${message.guild.id}"`).then(row => {
    //                 if (!row) { // Can't find the row.
    //                     sql.run("INSERT INTO servers (seid, prefix) VALUES (?, ?)", [message.guild.id, prefixName]);
    //                 } else { // Can find the row.
    //                     sql.run("UPDATE servers SET prefix= " + prefixName + " WHERE seid = " + message.guild.id);
    //                 }
    //                 message.reply("–ü—Ä–µ—Ñ–∏–∫—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **" + prefixName + "**.");
    //             }).catch(() => {
    //                 console.error; // Gotta log those errors
    //                 sql.run("CREATE TABLE IF NOT EXISTS servers (seid TEXT, prefix TEXT)").then(() => {
    //                     sql.run("INSERT INTO servers (seid, prefix) VALUES (?, ?)", [message.guild.id, defaultPrefix]);
    //                 });
    //             });
    //         } else {
    //             message.reply("–£–∫–∞–∂–∏ **–ø—Ä–µ—Ñ–∏–∫—Å** –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!");
    //         }
    //     } else {
    //         message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ **–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞** –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.");
    //     }
    // }

    if (message.content.startsWith(getPrefix(message.guild.id) + "help")) {
        if (message.author.bot) return;
        var EmbedMsg = new Discord.RichEmbed()
            .setTitle(bot.emojis.get("346743291393343500") + " –ü–æ–º–æ—â—å [VKBot v1.0]")
            .setDescription("–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞.")
            .setColor("#507299")
            .addBlankField()
            .addField("üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥ —ç—Ç–æ **vk!**, —Å–∫–æ—Ä–æ –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å.\n\n**vk!help** - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏\n**vk!prefix** *<–ø—Ä–µ—Ñ–∏–∫—Å>* - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–µ—Ñ–∏–∫—Å(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)\n**vk!user** *<—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å>*\n**vk!group** *<—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É>*\n\n**vk!link** *<—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å>* - –ü—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –í–ö –∫ –±–æ—Ç—É *(–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–∏–≤—è–∑–∫–∞)*")
            .addField("üõ° –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞", "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –í–ö –∫ –∞–∫–∫–∞—É–Ω—Ç—É Discord –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **vk!link** *<—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å>* –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–∏–≤—è–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!");
        message.author.send({
            embed: EmbedMsg
        });
        message.reply(`–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –õ–°`).then(message => message.delete(10000));
    }

    if (message.content.startsWith(getPrefix(message.guild.id) + "link")) {
        if (message.author.bot) return;

        let users = JSON.parse(fs.readFileSync("./users.json", "utf8"));
        const args = message.content.split(/\s+/g).slice(1);
        let pageID = args[0];
        let key = generateKey();
        if (users[message.author.id] !== undefined) { message.reply("–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ **—Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç** –∫ –∞–∫–∫–∞—É–Ω—Ç—É **–í–ö–æ–Ω—Ç–∞–∫—Ç–µ**!"); return; }
        if (pageID === undefined) {
            message.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π **id**/**–Ω–∏–∫–Ω–µ–π–º**");
        } else {
            // Checking for user, if everything is normal we are generating a key.
            vk.api.users.get({
                    user_ids: pageID.replace(',', ""),
                })
                // If we got a error closing the script.
                .catch(ApiError, (error) => {
                    if (error.code == "113") {
                        message.reply("–£–∫–∞–∑–∞–Ω–Ω—ã–π **id** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!");
                        return;
                    }
                }).then((user) => {
                    for (userData in user) {
                        if (user[userData] !== undefined) {
                            if (!message.channel.type === "dm") { message.reply("–í —Ü–µ–ª—è—Ö **–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏** –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –≤ **–õ–°**!"); }
                            map.set(message.author.id, `${key}|${pageID}`);
                            message.author.send(`–ü–æ—á—Ç–∏ –≤—Å—ë! –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏ –≤ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –í–ö —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, ***${key}***\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å —ç—Ç–æ, –Ω–∞–ø–∏—à–∏ **vk!verify** –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø—Ä–∏–≤—è–∑–∫—É.`);
                        }
                    }
                });
        }
    }

    if (message.content.startsWith(getPrefix(message.guild.id) + "unlink")) {
        // Loading a users.json
        let users = JSON.parse(fs.readFileSync("./users.json", "utf8"));
        // If bot => return;
        if (message.author.bot) return;
        // If noithing found in users.json
        if (users[message.author.id] === undefined) { message.reply("–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ **—Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç** –∫ –∞–∫–∫–∞—É–Ω—Ç—É **–í–ö–æ–Ω—Ç–∞–∫—Ç–µ**!"); return; }
        // Deleting user info and saving users.json
        delete users[message.author.id];
        message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ **—Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç** –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ **–í–ö–æ–Ω—Ç–∞–∫—Ç–µ**!");
        fs.writeFile("./users.json", JSON.stringify(users), (err) => {
            if (err) console.error(err)
        });
    }

    if (message.content.startsWith(getPrefix(message.guild.id) + "verify")) {
        let users = JSON.parse(fs.readFileSync("./users.json", "utf8"));
        if (message.author.bot) return;
        if (users[message.author.id] !== undefined) { message.reply("–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ **—Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç** –∫ –∞–∫–∫–∞—É–Ω—Ç—É **–í–ö–æ–Ω—Ç–∞–∫—Ç–µ**!"); return; }
        if (map.get(message.author.id) === undefined) { message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—Ö–æ–¥—É –≤—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ **vk!link**."); return; }
        var userInfo = map.get(message.author.id).split('|');
        vk.api.users.get({
            user_ids: userInfo[1].replace(',', ""),
            fields: 'status'
        }).then((user) => {
            for (userData in user) {
                if (user[userData].status == userInfo[0]) {
                    message.reply("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!");
                    message.reply("–ò–Ω—Ñ–æ: " + userInfo[0] + " and " + userInfo[1]);
                    if (!users[message.author.id]) users[message.author.id] = {
                        vkLink: userInfo[1]
                    };
                    fs.writeFile("./users.json", JSON.stringify(users), (err) => {
                        if (err) console.error(err)
                    });
                    map.remove(message.author.id);
                } else {
                    message.reply("–°—Ç–∞—Ç—É—Å –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                }
            }
        });
    }
    // if (message.content.startsWith(getPrefix(message.guild.id) + "lang")) {
    //     const args = message.content.split(/\s+/g).slice(1);
    //     let arg = args[0];
    //     let lang = checkLanguage(message.guild.id);
    //     let langjson = JSON.parse(fs.readFileSync("./lang.json", "utf8"));

    //     if (arg === undefined) {
    //         if ((lang) === "russian") {
    //             message.channel.send("Russian");
    //         } else if ((lang) === "english") {
    //             message.channel.send("English");
    //         }
    //     }


    //     // No args defined ==> No result
    //     if (args[1] === undefined) { return; }
    //     if (arg !== "set") { return; }


    //     if (args[1] === "ru") {
    //         ;
    //         message.channel.send("!Russian");
    //         if(!langjson[message.guild.id]) langjson[message.guild.id] = {
    //             lang: 'ru'
    //         };
    //         saveLang();
    //     }
    //     if (args[1] === "en") {
    //         message.channel.send("!eng");
    //         if(!langjson[message.guild.id]) langjson[message.guild.id] = {
    //             lang: 'en'
    //         };
    //         saveLang();
    //     }
    // }

});